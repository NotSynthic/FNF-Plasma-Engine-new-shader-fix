import flixel.text.FlxTextFormatMarkerPair;
import flixel.text.FlxTextFormat;
import flixel.text.FlxTextBorderStyle;

var bg;
var text;
var _logs = [];

var state = FlxG.state;

function create() {
    state.persistentUpdate = true;
    state.persistentDraw = true;

    bg = new FlxSprite().makeGraphic(1280, 720, 0x7F000000);
    if(PlayState != null)
        bg.cameras = [PlayState.camOther];
    add(bg);
    text = new FlxText(10,10, 1260, '', 20);
    text.font = AssetPaths.font('vcr', '.ttf');
    text.setBorderStyle(FlxTextBorderStyle.OUTLINE_FAST, 0, 10, 1);
    text.antialiasing = false;
    if(PlayState != null)
        text.cameras = [PlayState.camOther];
    add(text);
    reloadLogs();

    /*Main.print('error', 'test');
    Main.print('warn', 'test');
    Main.print('hscript', 'test');
    Main.print('trace', 'test');*/
}
function update(elapsed) {
    //reloadLogs();
    text.y = 710-text.height;
    if (_logs != Init.logs) {
        _logs = Init.logs;
        reloadLogs();
    }

    if(FlxG.keys.justPressed.F6 && state.logsOpen)
    {
        state.persistentUpdate = false;
        state.persistentDraw = true;

        state.logsOpen = false;
        substate.close();
    }
}

function reloadLogs() {
    text.text = '';
    for (i in Init.logs) {
        switch(i[0][0]) {
            case 'error':
                text.text += '\n<e>[   ERROR   ] ' + i[0][1] + '<e>';
            case 'warning':
                text.text += '\n<w>[  WARNING  ] ' + i[0][1] + '<w>';
            case 'hscript':
                text.text += '\n<h>[  HSCRIPT  ] ' + i[0][1] + '<h>';
            case 'trace':
                text.text += '\n<t>[   TRACE   ] ' + i[0][1] + '<t>';
        }
    }
    var errorformat = new FlxTextFormatMarkerPair(new FlxTextFormat(0xFFFF0000,  true), "<e>");
    var warnformat  = new FlxTextFormatMarkerPair(new FlxTextFormat(0xFFFFFF00, false), "<w>");
    var hxsformat   = new FlxTextFormatMarkerPair(new FlxTextFormat(0xFFFFFFFF, false), "<h>");
    var traceformat = new FlxTextFormatMarkerPair(new FlxTextFormat(0xFFFFFFFF, false), "<t>");
    text.applyMarkup(text.text, [errorformat, warnformat, hxsformat, traceformat]);
}