import openfl.display.Sprite;
import openfl.display.Graphics;
import openfl.geom.Rectangle;
import openfl.geom.Matrix;

var nuts:Sprite = new Sprite();
var nuts2:Graphics = nuts.graphics;

var args = {};

function new(cellW:Int, cellH:Int, gridW:Int, gridH:Int, color1:FlxColor, color2:FlxColor) {
    args = {
        cellW: cellW,
        cellH: cellH, 
        gridW: gridW, 
        gridH: gridH, 
        color1: color1, 
        color2: color2
    }
    pixels = new BitmapData(gridW, gridH, false, color1);
    for (i in 0...(gridW/cellW)) {
        for (j in 0...Std.int((gridH/cellH)/2)) {
            nuts2.lineStyle();
            nuts2.beginFill(FlxColor.to24Bit(color2), 1);
            var yOff = 0;
            if (FlxMath.isEven(i)) {
                yOff = cellH;
            }
            nuts2.drawRect(i*cellW, j*cellH*2+yOff, cellW, cellH);
            nuts2.endFill();
        }
    }
    pixels.draw(nuts);
}

function getCellAt(thex,they) {
    return {
        x: Math.floor((thex-x) / args.cellW),
        y: Math.floor((they-y) / args.cellH)
    }
}

function drawCell(thex, they, bitmap) {
    pixels.draw(
        bitmap,
        new Matrix(
            args.cellW/bitmap.width, 0, 0,
            args.cellH/bitmap.height, thex*args.cellW, they*args.cellH
        ),
        null,null,null,
        true
    );
}