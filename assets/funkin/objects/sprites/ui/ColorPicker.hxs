import flixel.util.FlxGradient;
import openfl.geom.ColorTransform;
import openfl.geom.Matrix;
import Int;
var BitmapHelper = importScript('helpers.BitmapHelper');

var size = [10,10];
var fullGradient;
var hueChooser;

var curColor = 0xFFFF0000;

var hue = 0;
var updateTimer = 0;

var hue = 0;
var sat = 0;
var bri = 100;

var gradientSprite;
var hueSprite;
var hueSlider;
var sbSlider;

var copyButton;
var pasteButton;

var slidingHue = false;
var slidingSB = false;

var onChange = null;

function new(w,h) {
    doesDefaultDraw = false;
    size = [w,h];
    hueChooser = new BitmapData(360, 20, true, 0);
    fullGradient = new BitmapData(w, h, true, 0);
    hueSprite = new FlxSprite(x,y+h);
    var singleStripe = FlxGradient.createGradientBitmapData(size[0], 1, [0xFFFFFFFF, 0xFFFF0000], 1, 0);
    for (i in 0...size[1]) {
        fullGradient.draw(
            singleStripe,
            new Matrix(
                1, 0, 0,
                1, 0, i
            ),
            new ColorTransform(
                1-i/(size[1]-20),1-i/(size[1]-20),1-i/(size[1]-20)
            )
        );
    }
    for (i in 0...360) {
        var coolPixel = new BitmapData(1, 1, false, FlxColor.fromHSB(i,1,1));
        hueChooser.draw(
            coolPixel,
            new Matrix(
                1, 0, 0,
                20, i, 0
            )
        );
    }
    hueSprite.loadGraphic(hueChooser);
    hueSprite.setGraphicSize(w, 20);
    hueSprite.updateHitbox();
    gradientSprite = new FNFSprite(x,y);
    gradientSprite.loadGraphic(fullGradient);
    gradientSprite.shader = new ColorShader(255,0,0);

    hueSlider = new FNFSprite(x-10,y+h+1);
    hueSlider.loadGraphic(BitmapHelper.newOutlinedCircle(8, 0x27FFFFFF, 2, 0x7FFFFFFF));
    sbSlider = new FNFSprite(x-10,y-10);
    sbSlider.loadGraphic(BitmapHelper.newOutlinedCircle(8, 0x27FFFFFF, 2, 0x7FFFFFFF));

    copyButton = new ScriptedSprite('ui/Button', [50,24,'Copy', 16, function(){
        var clipboardText = Clipboard.generalClipboard.setData(2, '#'+StringTools.hex(color-0xFF000000, 6));
    }], x+w+10,y+10);
    pasteButton = new ScriptedSprite('ui/Button', [50,24,'Paste', 16, function(){
        var clipboardText = Clipboard.generalClipboard.getData(2, 1);
        if (clipboardText != null) {
            var parsedColor:Null<FlxColor> = FlxColor.fromString(clipboardText);
            trace(parsedColor);
            if (parsedColor != null) {
                setColor(parsedColor, true);
                onChange(hue,sat/100,bri/100);
            }
        }
    }], x+w+10,y+44);
}

function draw() {
    hueSprite.draw();
    gradientSprite.draw();
    hueSlider.draw();
    sbSlider.draw();
    copyButton.draw();
    pasteButton.draw();
}

function update(elapsed) {
    copyButton.script.update(elapsed);
    pasteButton.script.update(elapsed);
    updateTimer += elapsed*100;
    if (FlxG.mouse.justPressed && FlxG.mouse.overlaps(hueSprite)) {
        slidingHue = true;
    } else if (FlxG.mouse.justPressed && FlxG.mouse.overlaps(gradientSprite)) {
        slidingSB = true;
    }
    if (FlxG.mouse.justReleased) {
        slidingHue = false;
        slidingSB = false;
    }

    if (slidingHue) {
        hue = (FlxG.mouse.x-x)/size[0]*360;
        updateHue();
        if (onChange != null)
            onChange(hue,sat/100,bri/100);
    } else if (slidingSB) {
        sat = (FlxG.mouse.x-x)/size[0]*100;
        bri = 100-((FlxG.mouse.y-y)/size[1]*100);
        updateSB();
        if (onChange != null)
            onChange(hue,sat/100,bri/100);
    }

    if (slidingHue || slidingSB) {
        color = FlxColor.fromHSB(hue, sat/100, bri/100);
    }
}

function setColor(color, isInt) {
    var fRGB = color;
    if (isInt)
        fRGB = getRGB(color);
    hue = get_hue(fRGB.r, fRGB.g, fRGB.b);
    sat = (maxOf3(fRGB.r,fRGB.g,fRGB.b) - minOf3(fRGB.r,fRGB.g,fRGB.b)) / maxOf3(fRGB.r,fRGB.g,fRGB.b)*100;
    bri = maxOf3(fRGB.r, fRGB.g, fRGB.b)/255*100;
    updateHue();
    updateSB();
    color = FlxColor.fromHSB(hue, sat/100, bri/100);
}

function updateHue() {
    if (hue < 0) hue = 0;
    if (hue > 360) hue = 360;
    hueSlider.x = x + hue/360*size[0]-9;
    var thecolor = FlxColor.fromHSB(hue,1,1);
    gradientSprite.shader.setColors(
        (thecolor >> 16) & 0xff,
        (thecolor >> 8) & 0xff,
        thecolor & 0xff
    );
}

function updateSB() {
    if (sat < 0) sat = 0;
    if (sat > 100) sat = 100;
    if (bri < 0) bri = 0;
    if (bri > 100) bri = 100;

    sbSlider.x = x + sat/100*size[0]-9;
    sbSlider.y = size[1] + (y - bri/100*size[1]-9);
}

function getRGB(hex) {
    return {
        'r': (hex >> 16) & 0xff,
        'g': (hex >> 8) & 0xff,
        'b': hex & 0xff
    };
}
function getFloatRGB(hex) {
    return {
        'r': ((hex >> 16) & 0xff) /255,
        'g': ((hex >> 8) & 0xff) /255,
        'b': (hex & 0xff) /255
    };
}

function maxOf3(a,b,c) { return Math.max(a, Math.max(b, c)); }
function minOf3(a,b,c) { return Math.min(a, Math.min(b, c)); }

function get_hue(redFloat, greenFloat, blueFloat) {
    var hueRad = Math.atan2(Math.sqrt(3) * (greenFloat - blueFloat), 2 * redFloat - greenFloat - blueFloat);
    var thehue:Float = 0;
    if (hueRad != 0)
    {
        thehue = 180 / Math.PI * Math.atan2(Math.sqrt(3) * (greenFloat - blueFloat), 2 * redFloat - greenFloat - blueFloat);
    }

    return thehue < 0 ? thehue + 360 : thehue;
}

// red = (color >> 16) & 0xff;
// green = (color >> 8) & 0xff;
// blue = color & 0xff;
// alpha = (color >> 24) & 0xff;

// hue = get_hue(rF,gF,bF);
// brightness = maxOf3(rF,gF,bF);
// saturation = (maxOf3(rF,gF,bF) - minOf3(rF,gF,bF)) / maxOf3(rF,gF,bF);import flixel.util.FlxGradient;
import openfl.geom.ColorTransform;
import openfl.geom.Matrix;
import Int;
var BitmapHelper = importScript('helpers.BitmapHelper');

var size = [10,10];
var fullGradient;
var hueChooser;

var curColor = 0xFFFF0000;

var hue = 0;
var updateTimer = 0;

var hue = 0;
var sat = 0;
var bri = 100;

var gradientSprite;
var hueSprite;
var hueSlider;
var sbSlider;

var copyButton;
var pasteButton;

var slidingHue = false;
var slidingSB = false;

var onChange = null;

function new(w,h) {
    doesDefaultDraw = false;
    size = [w,h];
    hueChooser = new BitmapData(360, 20, true, 0);
    fullGradient = new BitmapData(w, h, true, 0);
    hueSprite = new FlxSprite(x,y+h);
    var singleStripe = FlxGradient.createGradientBitmapData(size[0], 1, [0xFFFFFFFF, 0xFFFF0000], 1, 0);
    for (i in 0...size[1]) {
        fullGradient.draw(
            singleStripe,
            new Matrix(
                1, 0, 0,
                1, 0, i
            ),
            new ColorTransform(
                1-i/(size[1]-20),1-i/(size[1]-20),1-i/(size[1]-20)
            )
        );
    }
    for (i in 0...360) {
        var coolPixel = new BitmapData(1, 1, false, FlxColor.fromHSB(i,1,1));
        hueChooser.draw(
            coolPixel,
            new Matrix(
                1, 0, 0,
                20, i, 0
            )
        );
    }
    hueSprite.loadGraphic(hueChooser);
    hueSprite.setGraphicSize(w, 20);
    hueSprite.updateHitbox();
    gradientSprite = new FNFSprite(x,y);
    gradientSprite.loadGraphic(fullGradient);
    gradientSprite.shader = new ColorShader(255,0,0);

    hueSlider = new FNFSprite(x-10,y+h+1);
    hueSlider.loadGraphic(BitmapHelper.newOutlinedCircle(8, 0x27FFFFFF, 2, 0x7FFFFFFF));
    sbSlider = new FNFSprite(x-10,y-10);
    sbSlider.loadGraphic(BitmapHelper.newOutlinedCircle(8, 0x27FFFFFF, 2, 0x7FFFFFFF));

    copyButton = new ScriptedSprite('ui/Button', [50,24,'Copy', 16, function(){
        var clipboardText = Clipboard.generalClipboard.setData(2, '#'+StringTools.hex(color-0xFF000000, 6));
    }], x+w+10,y+10);
    pasteButton = new ScriptedSprite('ui/Button', [50,24,'Paste', 16, function(){
        var clipboardText = Clipboard.generalClipboard.getData(2, 1);
        if (clipboardText != null) {
            var parsedColor:Null<FlxColor> = FlxColor.fromString(clipboardText);
            trace(parsedColor);
            if (parsedColor != null) {
                setColor(parsedColor, true);
                onChange(hue,sat/100,bri/100);
            }
        }
    }], x+w+10,y+44);
}

function draw() {
    hueSprite.draw();
    gradientSprite.draw();
    hueSlider.draw();
    sbSlider.draw();
    copyButton.draw();
    pasteButton.draw();
}

function update(elapsed) {
    copyButton.script.update(elapsed);
    pasteButton.script.update(elapsed);
    updateTimer += elapsed*100;
    if (FlxG.mouse.justPressed && FlxG.mouse.overlaps(hueSprite)) {
        slidingHue = true;
    } else if (FlxG.mouse.justPressed && FlxG.mouse.overlaps(gradientSprite)) {
        slidingSB = true;
    }
    if (FlxG.mouse.justReleased) {
        slidingHue = false;
        slidingSB = false;
    }

    if (slidingHue) {
        hue = (FlxG.mouse.x-x)/size[0]*360;
        updateHue();
        if (onChange != null)
            onChange(hue,sat/100,bri/100);
    } else if (slidingSB) {
        sat = (FlxG.mouse.x-x)/size[0]*100;
        bri = 100-((FlxG.mouse.y-y)/size[1]*100);
        updateSB();
        if (onChange != null)
            onChange(hue,sat/100,bri/100);
    }

    if (slidingHue || slidingSB) {
        color = FlxColor.fromHSB(hue, sat/100, bri/100);
    }
}

function setColor(color, isInt) {
    var fRGB = color;
    if (isInt)
        fRGB = getRGB(color);
    hue = get_hue(fRGB.r, fRGB.g, fRGB.b);
    sat = (maxOf3(fRGB.r,fRGB.g,fRGB.b) - minOf3(fRGB.r,fRGB.g,fRGB.b)) / maxOf3(fRGB.r,fRGB.g,fRGB.b)*100;
    bri = maxOf3(fRGB.r, fRGB.g, fRGB.b)/255*100;
    updateHue();
    updateSB();
    color = FlxColor.fromHSB(hue, sat/100, bri/100);
}

function updateHue() {
    if (hue < 0) hue = 0;
    if (hue > 360) hue = 360;
    hueSlider.x = x + hue/360*size[0]-9;
    var thecolor = FlxColor.fromHSB(hue,1,1);
    gradientSprite.shader.setColors(
        (thecolor >> 16) & 0xff,
        (thecolor >> 8) & 0xff,
        thecolor & 0xff
    );
}

function updateSB() {
    if (sat < 0) sat = 0;
    if (sat > 100) sat = 100;
    if (bri < 0) bri = 0;
    if (bri > 100) bri = 100;

    sbSlider.x = x + sat/100*size[0]-9;
    sbSlider.y = size[1] + (y - bri/100*size[1]-9);
}

function getRGB(hex) {
    return {
        'r': (hex >> 16) & 0xff,
        'g': (hex >> 8) & 0xff,
        'b': hex & 0xff
    };
}
function getFloatRGB(hex) {
    return {
        'r': ((hex >> 16) & 0xff) /255,
        'g': ((hex >> 8) & 0xff) /255,
        'b': (hex & 0xff) /255
    };
}

function maxOf3(a,b,c) { return Math.max(a, Math.max(b, c)); }
function minOf3(a,b,c) { return Math.min(a, Math.min(b, c)); }

function get_hue(redFloat, greenFloat, blueFloat) {
    var hueRad = Math.atan2(Math.sqrt(3) * (greenFloat - blueFloat), 2 * redFloat - greenFloat - blueFloat);
    var thehue:Float = 0;
    if (hueRad != 0)
    {
        thehue = 180 / Math.PI * Math.atan2(Math.sqrt(3) * (greenFloat - blueFloat), 2 * redFloat - greenFloat - blueFloat);
    }

    return thehue < 0 ? thehue + 360 : thehue;
}

// red = (color >> 16) & 0xff;
// green = (color >> 8) & 0xff;
// blue = color & 0xff;
// alpha = (color >> 24) & 0xff;

// hue = get_hue(rF,gF,bF);
// brightness = maxOf3(rF,gF,bF);
// saturation = (maxOf3(rF,gF,bF) - minOf3(rF,gF,bF)) / maxOf3(rF,gF,bF);