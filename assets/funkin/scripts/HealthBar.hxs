import flixel.ui.FlxBarFillDirection;
import flixel.ui.FlxBar;

var image:FlxSprite;
var bar:FlxBar;

var iconP2:HealthIcon;
var iconP1:HealthIcon;

var scoreTxt:FlxText;
var scoreDivider:String = " â€¢ ";

function create() {
    ui.healthColors = [0xFFff0000, 0xFF00ff00];

    ui.healthBarBG = new FlxSprite(0, Settings["Downscroll"] ? 60 : FlxG.height - 80);
    ui.healthBarBG.loadGraphic(FNFAssets.getImage(AssetPaths.image("healthBar")));
    ui.healthBarBG.screenCenter(FlxAxes.X);
    add(ui.healthBarBG);

    ui.healthBar = new FlxBar(ui.healthBarBG.x + 4, ui.healthBarBG.y + 4, FlxBarFillDirection.RIGHT_TO_LEFT, Std.int(ui.healthBarBG.width - 8), Std.int(ui.healthBarBG.height - 8), PlayState,
    'health', PlayState.minHealth, PlayState.maxHealth);
    ui.healthBar.createFilledBar(ui.healthColors[0], ui.healthColors[1]);
    add(ui.healthBar);

    ui.iconP1 = new HealthIcon(PlayState.bf != null ? PlayState.bf.curCharacter : "face", true);
    ui.iconP1.y = ui.healthBar.y - (ui.iconP1.height / 2);
    add(ui.iconP1);

    ui.iconP2 = new HealthIcon(PlayState.dad != null ? PlayState.dad.curCharacter : "face", false);
    ui.iconP2.y = ui.healthBar.y - (ui.iconP2.height / 2);
    add(ui.iconP2);

    ui.scoreTxt = new FlxText(0, ui.healthBarBG.y + 35, 0, "test");
    ui.scoreTxt.setFormat(AssetPaths.font("vcr"), 16, FlxColor.WHITE, FlxTextAlign.CENTER);
    ui.scoreTxt.setBorderStyle(FlxTextBorderStyle.OUTLINE, FlxColor.BLACK, 1);
    ui.scoreTxt.scrollFactor.set();
    add(ui.scoreTxt);

    updateScoreText();
    positionIcons();
}

function beatHit(curBeat) {
    ui.iconP2.scale.set(1.2, 1.2);
    ui.iconP2.updateHitbox();

    ui.iconP1.scale.set(1.2, 1.2);
    ui.iconP1.updateHitbox();

    positionIcons();
}

function updateScoreText() {
    ui.scoreTxt.text = (
        "Score: " + PlayState.songScore + scoreDivider +
        "Accuracy: " + FlxMath.roundDecimal(PlayState.songAccuracy*100.0, 2) + "%" + scoreDivider +
        "Misses: " + PlayState.songMisses + scoreDivider +
        "Rank: " + Ranking.getRank(PlayState.songAccuracy*100.0)
    );
    if(PlayState.botPlay)
        ui.scoreTxt.text += scoreDivider + "[BOTPLAY]";

    ui.scoreTxt.screenCenter(FlxAxes.X);
}

function update() {
    var iconLerp:Float = Main.deltaTime * 25;

    ui.iconP2.scale.set(FlxMath.lerp(ui.iconP2.scale.x, 1, iconLerp), FlxMath.lerp(ui.iconP2.scale.y, 1, iconLerp));
    ui.iconP2.updateHitbox();

    ui.iconP1.scale.set(FlxMath.lerp(ui.iconP1.scale.x, 1, iconLerp), FlxMath.lerp(ui.iconP1.scale.y, 1, iconLerp));
    ui.iconP1.updateHitbox();

    if(ui.healthBar.percent < 20)
    {
        ui.iconP2.animation.play("winning");
        ui.iconP1.animation.play("losing");
    }
    else if(ui.healthBar.percent > 80)
    {
        ui.iconP2.animation.play("losing");
        ui.iconP1.animation.play("winning");
    }
    else
    {
        ui.iconP2.animation.play("normal");
        ui.iconP1.animation.play("normal");
    }

    positionIcons();
}

function positionIcons() {
    var iconOffset:Int = 26;

    ui.iconP1.x = ui.healthBar.x + (ui.healthBar.width * (FlxMath.remapToRange(ui.healthBar.percent, 0, 100, 100, 0) * 0.01) - iconOffset);
    ui.iconP2.x = ui.healthBar.x + (ui.healthBar.width * (FlxMath.remapToRange(ui.healthBar.percent, 0, 100, 100, 0) * 0.01)) - (ui.iconP2.width - iconOffset);
}